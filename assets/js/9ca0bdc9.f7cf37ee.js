"use strict";(self.webpackChunkdocs_carbonscript=self.webpackChunkdocs_carbonscript||[]).push([[6649],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(r),m=o,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return r?n.createElement(h,i(i({ref:t},c),{},{components:r})):n.createElement(h,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},3904:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:3},i=void 0,l={unversionedId:"Basics/Operator",id:"Basics/Operator",title:"Operator",description:"Arithmetic Operators",source:"@site/docs/Basics/Operator.md",sourceDirName:"Basics",slug:"/Basics/Operator",permalink:"/docs/Basics/Operator",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Keywords",permalink:"/docs/Basics/Keywords"},next:{title:"Entry and Exit",permalink:"/docs/Basics/Entry and Exit"}},s={},p=[{value:"Arithmetic Operators",id:"arithmetic-operators",level:2},{value:"Logical Operators",id:"logical-operators",level:2},{value:"Comparison Operators",id:"comparison-operators",level:2},{value:"Assignment Operator",id:"assignment-operator",level:2},{value:"Relational Operators",id:"relational-operators",level:2},{value:"<code>in</code>",id:"in",level:3},{value:"<code>not in</code>",id:"not-in",level:3},{value:"Conditional Operator",id:"conditional-operator",level:2},{value:"String Operator",id:"string-operator",level:2},{value:"concat operator <code>+</code>",id:"concat-operator-",level:3},{value:"Permutation Compare Operator <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code>",id:"permutation-compare-operator----",level:3},{value:"Parentheses and operator precedence",id:"parentheses-and-operator-precedence",level:2}],c={toc:p};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"arithmetic-operators"},"Arithmetic Operators"),(0,o.kt)("p",null,"Arithmetic operators express the arithmetic relationship between data. "),(0,o.kt)("h2",{id:"logical-operators"},"Logical Operators"),(0,o.kt)("p",null,"Logical operator expression has usages for calculating Boolean data."),(0,o.kt)("h2",{id:"comparison-operators"},"Comparison Operators"),(0,o.kt)("p",null,"Compares its operands and returns a logical value based on whether the expression is true. Operands can be numbers, strings, booleans, object values."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},">"),": Bigger than something"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"<"),": Smaller than something"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},">="),": Bigger than or equal to something"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"<="),": Smaller than or equal to something")),(0,o.kt)("p",null,"It returns a boolean value to indicate whether the relationship holds. Comparison operators apply to two numbers. If both sides are strings, it will compare their dictionary permutations."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"5 > 9           # false\n'abc' < 'bbc'   # true\n")),(0,o.kt)("h2",{id:"assignment-operator"},"Assignment Operator"),(0,o.kt)("p",null,"Assignment operator ",(0,o.kt)("inlineCode",{parentName:"p"},"=")," are used to assign a value to a variable or object reference. It can assign a value to a variable or object"),(0,o.kt)("p",null,"For example,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"set age:number = 18;\n")),(0,o.kt)("h2",{id:"relational-operators"},"Relational Operators"),(0,o.kt)("p",null,"Relational operators express the relationship between iterable containers and elements. Expressions using relational operators return a boolean value indicating whether the relation holds or not."),(0,o.kt)("p",null,"It's just a syntactic sugar for the container's built-in functions, you can also use built-in functions instead"),(0,o.kt)("h3",{id:"in"},(0,o.kt)("inlineCode",{parentName:"h3"},"in")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"in")," used to judge whether the element is in the container. it returns a boolean as result."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"set arr[] : number = [1,2,3,4,5];\nprint(5 in arr);    # true\n")),(0,o.kt)("h3",{id:"not-in"},(0,o.kt)("inlineCode",{parentName:"h3"},"not in")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"not in")," is the inverse operation of in, if the element is not in the specified container, it will return true"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"set arr[] : number = [1,2,3,4,5];\nprint(6 not in arr);    # true\n")),(0,o.kt)("h2",{id:"conditional-operator"},"Conditional Operator"),(0,o.kt)("p",null,"The conditional operator is the ternary operator. It is an expression template that returns the corresponding content according to the boolean value returned by the condition."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"(<boolean expression>) ? <true-case value> : <false-case value>;\n")),(0,o.kt)("p",null,"For example,"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"print(((1 > 2) ? 'Yes' : 'No'))   # 'No'\n")),(0,o.kt)("h2",{id:"string-operator"},"String Operator"),(0,o.kt)("p",null,"String operators are also syntactic sugar for string functions."),(0,o.kt)("h3",{id:"concat-operator-"},"concat operator ",(0,o.kt)("inlineCode",{parentName:"h3"},"+")),(0,o.kt)("p",null,"This operator is often used for string concatenation. When the left and right sides of this operator are strings, the concatenation operation is performed. If one side is not a string, it will be implicitly converted before concatenation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"set str1, str2, str3:string = 'abc', 'def';\nprint(str1 + str2); # 'abcdef'\nprint(str2 + str3); # 'abc', The str3 is null, was implicit convert to empty string\n")),(0,o.kt)("h3",{id:"permutation-compare-operator----"},"Permutation Compare Operator ",(0,o.kt)("inlineCode",{parentName:"h3"},">"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"<"),", ",(0,o.kt)("inlineCode",{parentName:"h3"},">="),", ",(0,o.kt)("inlineCode",{parentName:"h3"},"<=")),(0,o.kt)("h2",{id:"parentheses-and-operator-precedence"},"Parentheses and operator precedence"),(0,o.kt)("p",null,"Operators and parentheses have priority. When a statement or expression is executed, the execution order will be adjusted according to a rule operator. This rule is called ",(0,o.kt)("inlineCode",{parentName:"p"},"precedence"),"."))}d.isMDXComponent=!0}}]);